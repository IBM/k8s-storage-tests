---
########################################################################################

########################################################################################
# Mount Test
########################################################################################
- name: Test mount {{ accessMode }} volumes for {{ prefix }}
  k8s:
    state: present
    namespace: "{{ storage_validation_namespace }}"
    definition: "{{ lookup('template', item.name) | from_yaml }}"
  loop:
     - name: create-volume.yaml.j2

########################################################################################
# Parallel Write/Read single thread
########################################################################################

- block:

  - name: Set config maps
    k8s:
      state: present
      namespace: "{{ storage_validation_namespace }}"
      definition: "{{ lookup('template', item.name) | from_yaml }}"
    loop:
       - name: producer-cm.yaml.j2
       - name: consumer-nocheck-cm.yaml.j2
    vars:
      options: "oflag=dsync conv=notrunc"

  - name: Parallel read/write  {{ accessMode }} volumes for {{ prefix }}
    k8s:
      state: present
      namespace: "{{ storage_validation_namespace }}"
      definition: "{{ lookup('template', item.name) | from_yaml }}"
    loop:
       - name: producer.yaml.j2
    vars:   
      type: parallel

  - name: Parallel concurrency read while producer is running 
    k8s:
      state: present
      namespace: "{{ storage_validation_namespace }}"
      definition: "{{ lookup('template', item.name) | from_yaml }}"
      wait: yes
      wait_timeout: 50
      wait_condition:
        type: Complete
        status: "True"
    loop:
      - name: consumer-nocheck.yaml.j2
    vars:    
      type: parallel-nocheck
      backoffLimit: 6

  - name: Assert that producer is still running
    k8s_info:
      kind: Job
      name: "{{ prefix }}-producer-job-{{ accessMode|lower}}-{{ type }}"
      namespace: "{{ storage_validation_namespace }}"
    register: job_status
    vars:  
      type: parallel

  - name: Fail if producer job is already completed
    fail:
      msg: "Producer job ran too soon, test may be inaccurate"
    when: job_status.resources[0].status.active is defined and job_status.resources[0].status.active != 1

  - name: Wait until producer job is done
    k8s_info:
      name: "{{ prefix }}-producer-job-{{ accessMode|lower}}-{{ type }}"
      namespace: "{{ storage_validation_namespace }}"
      kind: Job
    register: job_status
    until: job_status.resources[0].status.succeeded is defined and job_status.resources[0].status.succeeded == 1
    retries: 20
    delay: 10
    vars:   
      type: parallel

- name: Parallel read  {{ accessMode }} volumes for {{ prefix }}
  k8s:
    state: present
    namespace: "{{ storage_validation_namespace }}"
    definition: "{{ lookup('template', item.name) | from_yaml }}"
    wait: yes
    wait_timeout: 60
    wait_condition:
      type: Complete
      status: "True"
  loop:
     - name: consumer.yaml.j2
  vars:    
    type: parallel-final

- debug:
    msg: "######################## SINGLE THREAD PARALLEL READ WRITE TEST PASSED for {{ accessMode }} #################################"
